# -*- coding: utf-8 -*-
from requests import get
from requests.auth import HTTPBasicAuth
from datetime import datetime, timedelta
from matterhook import Webhook


class Mattermost(object):
    def integrate(self, apiaddress='', user='', password='', beforedays=1, webhookaddress='', webhookkey='', cveaddress=''):
        reports = []
        alerts = []
        cves = []
        before_date = (datetime.utcnow() - timedelta(beforedays)).isoformat()
        reports = self.get_api_paging(
            apiaddress + '/api/reports', user, password)
        filtered_reports = list(
            filter(lambda x: x['created_at'] > before_date, reports))
        for report in filtered_reports:
            alerts.extend(self.get_api(apiaddress + '/api/reports/' +
                          report['id'] + '/alerts', user, password))
        for alert in alerts:
            cves.append(self.get_api(apiaddress + '/api/cve/' +
                        alert['cve'], user, password))
        self.send_webhook(webhookaddress, webhookkey, cves, cveaddress)

    def send_webhook(self, webhookaddress, webhookkey, cves, cveaddress):
        mwh = Webhook(webhookaddress, webhookkey)
        for cve in cves:
            formattedvendors = self.get_formatted_vendors(cve['vendors'])
            attachments = []
            message = {}
            message['color'] = '#88fc03'
            message['fallback'] = 'A fallback message'

            markdown_msg = '##### [' + cve['id'] + \
                '](' + cveaddress + cve['id'] + ') \n'
            markdown_msg += cve['summary'] + '\n'
            markdown_msg += '**Vendors :** ' + formattedvendors

            message['text'] = markdown_msg
            attachments.append(message)
            mwh.send(attachments=attachments)

    def get_formatted_vendors(self, vendors):
        formatted_text = ''
        for vendor, products in vendors.items():
            formatted_text += vendor + ' [ '
            for product in products:
                formatted_text += product + ' '
            formatted_text += '] '
        return formatted_text

    def get_api_paging(self, apiaddress, user, password, params=''):
        page = 1
        results = []
        while page:
            response = get(apiaddress + '?page=' + str(page) + '&' + params,
                           auth=HTTPBasicAuth(user, password))
            if response.ok:
                results.extend(response.json())
                page = page + 1
            else:
                return results

    def get_api(self, apiaddress, user, password, params=''):
        response = get(apiaddress + '?' + params,
                       auth=HTTPBasicAuth(user, password))
        if response.ok:
            return response.json()
